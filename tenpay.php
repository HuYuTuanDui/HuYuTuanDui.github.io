<?phpinclude "./inc/conn.php";$ndate = date("Y-m-d H:i:s");$hosts = $_SERVER['HTTP_HOST'];$porta = $_SERVER["SERVER_PORT"];if(stristr("-80-","-{$porta}-")){$ports = ''; $httpa = "http://";}elseif(stristr("-443-","-{$porta}-")){$ports = ''; $httpa = "https://";}else{$ports = ':'.$porta; $httpa = "http://";}$ol = $_SERVER["SCRIPT_NAME"]; //REQUEST_URI$dn = $httpa.$hosts.$ports.$ol;$am = str_replace("tenpay.php","tenpay.back.php",$dn);$yn = $am; //付款成功后的异步回调地址$cu = date("Ymd").uniqid(); //你自己的商品订单号，不能重复$mchid = $eq;  //微信支付商户号$appid = $xm;  //公众号APPID$apiKey = $ww; //帐户设置-安全设置-API安全-API密钥-设置API密钥$ly = $_GET['id'];if(!is_numeric($ly)){exit("参数传递错误001"); //id非数字}if($ei.'@'=='2@'){exit("终止:支付已关闭"); //id非数字}if(strlen($mchid)<8){exit("终止:mchid 无效"); //appid无效}if(strlen($appid)<10){exit("终止:appid 无效"); //rsaKey无效}if(strlen($apiKey)<10){exit("终止:apiKey 无效"); //rsaKey无效}$db=ConnectMysqli::getIntance($conn);$sql="select * from `kudi` where `hi` = '{$ly}'";$info=$db->getRow($sql);if(!$info){exit("参数传递错误002"); //ID查无记录}else{$sb = $info['ge'];  //付款金额，单位:元if($hosts=="fo.ym.net") $sb = "0.08";  //付款金额，单位:元$ob = $info['le']."_赞助_".$sb;  //订单标题$px = $info['juan_isid'];  //订单号$gx = $info['pe'];  //是否支付$ed = $info['ls'];  //是否支付$ua = $info['ot'];$icheck = $info['check'];$pTime = date("Y-m-d H:i:s");  //付款时间$userid = $info['hi'];if($icheck<0){exit("终止:无效订单"); //有记录不可查询}if($gx>0){exit("终止:已经支付"); //已经被支付了的}//几分钟内还是原来的二维码$ay = strtotime($ua);$timenow = strtotime(date("Y-m-d H:i:s"));$nv = ceil(($timenow-$ay)/60); //60s//if($nv>1 || !stristr($ed,"weixin://")){ //大于2小时刷新二维码if($nv>15 || strlen($ed)<20){ //大于15分钟//exit($nv."天");}else{//两小时有效$url = './inc/QrCode.php?large=true&data='.$ed;echo "<img src='{$url}' style='width:180px;'><br>";echo '微信扫码付款：'.$sb;exit();}}$wxPay = new WxpayService($mchid,$appid,$apiKey,$userid);$arary = $wxPay->gopay($sb,$cu,$ob,$yn,$pTime);$ju = $arary['code_url'];$list = array();$list['ls'] = "'{$ju}'";$list['juan_isid'] = "'{$cu}'";$list['fi'] = "'ten'";$list['ot'] = "'{$ndate}'";$echos=$db->updata("kudi", $list, " `hi` = '{$ly}'");if($echos){}else{}$paurl = './inc/QrCode.php?data='.$arary['code_url'];echo "<img src='{$paurl}' style='width:180px;'><br>";echo '微信扫码付款：'.$sb;class WxpayService {protected $mchid;protected $appid;protected $apiKey;public function __construct($mchid, $appid, $key, $userid) {$this->mchid = $mchid;$this->appid = $appid;$this->userid = $userid;$this->apiKey = $key;}public function gopay($totalFee, $outTradeNo, $orderName, $notifyUrl, $timestamp){$config = array('mch_id' => $this->mchid,'appid' => $this->appid,'userid' => $this->userid,'key' => $this->apiKey,);//$orderName = iconv('GBK','UTF-8',$orderName);$unified = array('appid' => $config['appid'],	//appid'attach' => $config['userid'],	//商家数据包，原样返回，如果填写中文，请注意转换为utf-8'body' => $orderName,	//订单标题'mch_id' => $config['mch_id'],	//mch_id'nonce_str' => self::createNonceStr(),	//随机值'notify_url' => $notifyUrl,	//回调地址'out_trade_no' => $outTradeNo,	//你自己的商品订单号'spbill_create_ip' => '127.0.0.1',	//IP'total_fee' => intval($totalFee * 100),	//单位 转为分'trade_type' => 'NATIVE',	//NATIVE：原生支付);$unified['sign'] = self::getSign($unified, $config['key']);	//得到签名$paymch = 'https://api.mch.weixin.qq.com/pay/unifiedorder';	//获取支付URL接口$responseXml = self::curlPost($paymch, self::arrayToXml($unified));libxml_disable_entity_loader(true);  //禁止引用外部xml实体$unifiedOrder = simplexml_load_string($responseXml, 'SimpleXMLElement', LIBXML_NOCDATA);if ($unifiedOrder === false) {die('parse xml error');}if ($unifiedOrder->return_code != 'SUCCESS') {die($unifiedOrder->return_msg);}if ($unifiedOrder->result_code != 'SUCCESS') {die($unifiedOrder->err_code);}$codeUrl = (array)($unifiedOrder->code_url);if(!$codeUrl[0]) exit('get code_url error');	//无法得到URL$arr = array("appId" => $config['appid'],"timeStamp" => $timestamp,"nonceStr" => self::createNonceStr(),"package" => "prepay_id=" . $unifiedOrder->prepay_id,"signType" => 'MD5',"code_url" => $codeUrl[0],);$arr['paySign'] = self::getSign($arr, $config['key']);return $arr;}//curlPostpublic static function curlPost($url = '', $postData = '', $options = array())  {if (is_array($postData)) {$postData = http_build_query($postData);}$ch = curl_init();curl_setopt($ch, CURLOPT_URL, $url);curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);curl_setopt($ch, CURLOPT_POST, 1);curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);curl_setopt($ch, CURLOPT_TIMEOUT, 30); //设置cURL允许执行的最长秒数if (!empty($options)) {curl_setopt_array($ch, $options);}curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//https请求 不验证证书curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);//https请求 不验证host$data = curl_exec($ch);curl_close($ch);return $data;}// 随机字符串16位public static function createNonceStr($length = 16)  {$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';$str = '';for ($i = 0; $i < $length; $i++) {$str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);}return $str;}//数组转xmlpublic static function arrayToXml($arr)  {$xml = "<xml>";foreach ($arr as $key => $val) {if (is_numeric($val)) {$xml .= "<" . $key . ">" . $val . "</" . $key . ">";} else$xml .= "<" . $key . "><![CDATA[" . $val . "]]></" . $key . ">";}$xml .= "</xml>";return $xml;}//获取签名public static function getSign($params, $key) {ksort($params, SORT_STRING);$unSignParaString = self::formatQueryParaMap($params, false);$signStr = strtoupper(md5($unSignParaString . "&key=" . $key));return $signStr;}//数组转queryprotected static function formatQueryParaMap($paraMap, $urlEncode = false)  {$buff = "";ksort($paraMap);foreach ($paraMap as $k => $v) {if (null != $v && "null" != $v) {if ($urlEncode) {$v = urlencode($v);}$buff .= $k . "=" . $v . "&";}}$reqPar = '';if (strlen($buff) > 0) {$reqPar = substr($buff, 0, strlen($buff) - 1);}return $reqPar;}}